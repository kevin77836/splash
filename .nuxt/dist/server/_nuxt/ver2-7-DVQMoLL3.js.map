{"version":3,"file":"ver2-7-DVQMoLL3.js","sources":["../../../../pages/ver2-7.vue"],"sourcesContent":["<template>\n  <div class=\"main-container\">\n    <div v-if=\"loadComplete && !isStarted\" class=\"startButton\" @click=\"clickStart\">\n      Start\n    </div>\n    \n    <h1 :class=\"{'start': isStarted}\" class=\"company-name\">\n      <span class=\"front-name\">\n        Splash\n      </span>\n      <span class=\"back-name\">\n        DigiLab\n      </span>\n    </h1>\n  </div>\n  <Splash\n    ref=\"splashRef\" \n    :isStarted=\"isStarted\"\n    @resourcesLoaded=\"handleResourcesLoaded\"\n    @stateChange=\"handleStateChange\"\n    @animationComplete=\"handleAnimationComplete\"\n  />\n  <!-- <div class=\"button-group\">\n    <button @click=\"growingFunction\">開始生長</button>\n    <button @click=\"shrinkingFunction\">開始收合</button>\n    <button @click=\"startAutoPlay\">開始自動播放</button>\n    <button @click=\"stopAutoPlay\">停止自動播放</button>\n    <div class=\"status\">狀態: {{ currentState }}</div>\n    <div class=\"status\">資源狀態: {{ loadComplete ? '已載入' : '載入中' }}</div>\n    <div class=\"status\">自動播放: {{ isAutoPlaying ? '進行中' : '停止' }}</div>\n  </div> -->\n</template>\n<script setup>\nconst splashRef = ref(null);\nconst loadComplete = ref(false);\nconst currentState = ref('idle');\nconst isAutoPlaying = ref(false);\nconst isStarted = ref(false);\nlet autoPlayTimer = null;\nconst startButton = ref(null);\n\n\n\n\n// 基本動畫控制函數\nconst growingFunction = () => {\n  if (splashRef.value) {\n    splashRef.value.startGrowingAnimation();\n  }\n}\n\nconst shrinkingFunction = () => {\n  if (splashRef.value) {\n    splashRef.value.startShrinkingAnimation();\n  }\n}\n\n// 處理資源載入完成事件\nconst handleResourcesLoaded = () => {\n  loadComplete.value = true;\n  // console.log('資源載入完成，開始自動播放');\n  // startAutoPlay();\n}\n\n// 處理狀態變化\nconst handleStateChange = (state) => {\n  currentState.value = state;\n}\n\n// 處理動畫完成事件\nconst handleAnimationComplete = (animationType) => {\n  if (!isAutoPlaying.value) return;\n  \n  if (animationType === 'growing') {\n    // 生長動畫完成，等待1秒後開始收縮\n    autoPlayTimer = setTimeout(() => {\n      shrinkingFunction();\n    }, 1000);\n  } else if (animationType === 'shrinking') {\n    // 收縮動畫完成，等待1秒後開始生長\n    autoPlayTimer = setTimeout(() => {\n      growingFunction();\n    }, 2000);\n  }\n}\n\nconst clickStart = () => {\n  isStarted.value = true;\n  startAutoPlay();\n  splashRef.value.addMouseControlEvents();\n}\n\n// 開始自動播放\nconst startAutoPlay = () => {\n  if (isAutoPlaying.value) return; // 如果已經在播放則不執行\n  isAutoPlaying.value = true;\n  \n  // 從生長動畫開始\n  growingFunction();\n}\n\n// 停止自動播放\nconst stopAutoPlay = () => {\n  isAutoPlaying.value = false;\n  \n  // 清除任何待執行的定時器\n  if (autoPlayTimer) {\n    clearTimeout(autoPlayTimer);\n    autoPlayTimer = null;\n  }\n  \n  // 執行收合動畫，使其回到起點\n  shrinkingFunction();\n}\n\n// 組件卸載時清理\nonUnmounted(() => {\n  if (autoPlayTimer) {\n    clearTimeout(autoPlayTimer);\n  }\n  isAutoPlaying.value = false;\n});\n</script>"],"names":[],"mappings":";;;;;;;AAiCA,UAAM,YAAY,IAAI,IAAI;AAC1B,UAAM,eAAe,IAAI,KAAK;AAC9B,UAAM,eAAe,IAAI,MAAM;AAC/B,UAAM,gBAAgB,IAAI,KAAK;AAC/B,UAAM,YAAY,IAAI,KAAK;AAEP,QAAI,IAAI;AAM5B,UAAM,kBAAkB,MAAM;AAC5B,UAAI,UAAU,OAAO;AACnB,kBAAU,MAAM,sBAAuB;AAAA,MAC3C;AAAA,IACA;AAEA,UAAM,oBAAoB,MAAM;AAC9B,UAAI,UAAU,OAAO;AACnB,kBAAU,MAAM,wBAAyB;AAAA,MAC7C;AAAA,IACA;AAGA,UAAM,wBAAwB,MAAM;AAClC,mBAAa,QAAQ;AAAA,IAGvB;AAGA,UAAM,oBAAoB,CAAC,UAAU;AACnC,mBAAa,QAAQ;AAAA,IACvB;AAGA,UAAM,0BAA0B,CAAC,kBAAkB;AACjD,UAAI,CAAC,cAAc,MAAO;AAE1B,UAAI,kBAAkB,WAAW;AAEf,mBAAW,MAAM;AAC/B,4BAAmB;AAAA,QACpB,GAAE,GAAI;AAAA,MACX,WAAa,kBAAkB,aAAa;AAExB,mBAAW,MAAM;AAC/B,0BAAiB;AAAA,QAClB,GAAE,GAAI;AAAA,MACX;AAAA,IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}