{"file":"ver2-6.vue.mjs","mappings":";;;;;;;;;AAkBA,UAAM,YAAY,IAAI,IAAI;AAC1B,UAAM,eAAe,IAAI,KAAK;AAC9B,UAAM,eAAe,IAAI,MAAM;AAC/B,UAAM,gBAAgB,IAAI,KAAK;AAI/B,UAAM,kBAAkB,MAAM;AAC5B,UAAI,UAAU,OAAO;AACnB,kBAAU,MAAM,sBAAuB;AAAA,MAC3C;AAAA,IACA;AAEA,UAAM,oBAAoB,MAAM;AAC9B,UAAI,UAAU,OAAO;AACnB,kBAAU,MAAM,wBAAyB;AAAA,MAC7C;AAAA,IACA;AAGA,UAAM,wBAAwB,MAAM;AAClC,mBAAa,QAAQ;AACrB,cAAQ,IAAI,eAAe;AAC3B,oBAAe;AAAA,IACjB;AAGA,UAAM,oBAAoB,CAAC,UAAU;AACnC,mBAAa,QAAQ;AAAA,IACvB;AAGA,UAAM,0BAA0B,CAAC,kBAAkB;AACjD,UAAI,CAAC,cAAc,MAAO;AAE1B,UAAI,kBAAkB,WAAW;AAEf,mBAAW,MAAM;AAC/B,4BAAmB;AAAA,QACpB,GAAE,GAAI;AAAA,MACX,WAAa,kBAAkB,aAAa;AAExB,mBAAW,MAAM;AAC/B,0BAAiB;AAAA,QAClB,GAAE,GAAI;AAAA,MACX;AAAA,IACA;AAGA,UAAM,gBAAgB,MAAM;AAC1B,UAAI,cAAc,MAAO;AAEzB,oBAAc,QAAQ;AAGtB,sBAAiB;AAAA,IACnB;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/ver2-6.vue"],"sourcesContent":["<template>\n  <Splash2\n    ref=\"splashRef\" \n    @resourcesLoaded=\"handleResourcesLoaded\"\n    @stateChange=\"handleStateChange\"\n    @animationComplete=\"handleAnimationComplete\"\n  />\n  <div class=\"button-group\">\n    <button @click=\"growingFunction\">開始生長</button>\n    <button @click=\"shrinkingFunction\">開始收合</button>\n    <button @click=\"startAutoPlay\">開始自動播放</button>\n    <button @click=\"stopAutoPlay\">停止自動播放</button>\n    <div class=\"status\">狀態: {{ currentState }}</div>\n    <div class=\"status\">資源狀態: {{ loadComplete ? '已載入' : '載入中' }}</div>\n    <div class=\"status\">自動播放: {{ isAutoPlaying ? '進行中' : '停止' }}</div>\n  </div>\n</template>\n<script setup>\nconst splashRef = ref(null);\nconst loadComplete = ref(false);\nconst currentState = ref('idle');\nconst isAutoPlaying = ref(false);\nlet autoPlayTimer = null;\n\n// 基本動畫控制函數\nconst growingFunction = () => {\n  if (splashRef.value) {\n    splashRef.value.startGrowingAnimation();\n  }\n}\n\nconst shrinkingFunction = () => {\n  if (splashRef.value) {\n    splashRef.value.startShrinkingAnimation();\n  }\n}\n\n// 處理資源載入完成事件\nconst handleResourcesLoaded = () => {\n  loadComplete.value = true;\n  console.log('資源載入完成，開始自動播放');\n  startAutoPlay();\n}\n\n// 處理狀態變化\nconst handleStateChange = (state) => {\n  currentState.value = state;\n}\n\n// 處理動畫完成事件\nconst handleAnimationComplete = (animationType) => {\n  if (!isAutoPlaying.value) return;\n  \n  if (animationType === 'growing') {\n    // 生長動畫完成，等待1秒後開始收縮\n    autoPlayTimer = setTimeout(() => {\n      shrinkingFunction();\n    }, 1000);\n  } else if (animationType === 'shrinking') {\n    // 收縮動畫完成，等待1秒後開始生長\n    autoPlayTimer = setTimeout(() => {\n      growingFunction();\n    }, 1000);\n  }\n}\n\n// 開始自動播放\nconst startAutoPlay = () => {\n  if (isAutoPlaying.value) return; // 如果已經在播放則不執行\n  \n  isAutoPlaying.value = true;\n  \n  // 從生長動畫開始\n  growingFunction();\n}\n\n// 停止自動播放\nconst stopAutoPlay = () => {\n  isAutoPlaying.value = false;\n  \n  // 清除任何待執行的定時器\n  if (autoPlayTimer) {\n    clearTimeout(autoPlayTimer);\n    autoPlayTimer = null;\n  }\n  \n  // 執行收合動畫，使其回到起點\n  shrinkingFunction();\n}\n\n// 組件卸載時清理\nonUnmounted(() => {\n  if (autoPlayTimer) {\n    clearTimeout(autoPlayTimer);\n  }\n  isAutoPlaying.value = false;\n});\n</script>\n\n<style scoped>\n.splash-page {\n  width: 100%;\n  height: 100vh;\n  overflow: hidden;\n}\n\n.button-group {\n  position: absolute;\n  top: 20px;\n  left: 20px;\n  z-index: 10;\n}\n\n.status {\n  margin-top: 8px;\n  color: white;\n  background-color: rgba(0, 0, 0, 0.6);\n  padding: 5px 10px;\n  border-radius: 4px;\n}\n\nbutton {\n  margin-right: 8px;\n  padding: 8px 12px;\n  border: none;\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, 0.6);\n  color: white;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: rgba(40, 40, 40, 0.8);\n}\n</style>"],"version":3}