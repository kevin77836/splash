{
  "id": 7096,
  "name": "adas",
  "fragment": "precision highp float;\nprecision highp int;\nuniform sampler2D textureSampler;\nuniform vec3 sampleColor;\nuniform float time;\nuniform float speed;\nuniform vec2 charSize;\nuniform float charResolution;\nuniform vec3 color;\nuniform vec4 backgroundColor;\nuniform vec2 resolution;\nvarying vec2 Black_White_Texture_Filter1740379424525_129_vUv;\nvarying vec2 Enter_The_Matrix1740379475608_175_vUv;\nfloat seed = 2.0;\nfloat random(float x) \n                                                {\n                                                    return fract(sin(x) * 43758.5453);\n                                                }\nfloat random(vec2 st) \n                                                {\n                                                    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n                                                }\nfloat randomChar(vec2 outer, vec2 inner) \n                                                {\n                                                    vec2 margin = 1.0 - charSize;\n                                                    vec2 borders = step(margin, inner) * step(margin, 1.0 - inner);\n                                                    return step(0.5, random(outer * seed + floor(inner * charResolution))) * borders.x * borders.y;\n                                                }\nvec4 matrix(vec2 st) \n                                                {\n                                                    float rows = 50.0;\n                                                    vec2 ipos = floor(st * rows) + vec2(1.0, 0.0);\n                                                    ipos += vec2(0.0, floor(time * speed * random(ipos.x)));\n                                                    vec2 fpos = fract(st * rows);\n                                                    vec2 center = 0.5 - fpos;\n                                                    float pct = random(ipos);\n                                                    float glow = (1.0 - dot(center, center) * 3.0) * 2.0;\n                                                    float result = randomChar(ipos, fpos) * pct * glow;\n                                                    return vec4(color * result, result);\n                                                }\nvec4 Black_White_Texture_Filter1740379424525_129_main() \n                                                {\n                                                    vec4 Black_White_Texture_Filter1740379424525_129_gl_FragColor = vec4(0.0);\n                                                    float luminance = dot(texture2D(textureSampler, Black_White_Texture_Filter1740379424525_129_vUv).rgb, sampleColor);\n                                                    Black_White_Texture_Filter1740379424525_129_gl_FragColor = vec4(luminance, luminance, luminance, 1.0);\n                                                    return Black_White_Texture_Filter1740379424525_129_gl_FragColor *= 0.1;\n                                                }\nvec4 Enter_The_Matrix1740379475608_175_main() \n                                                {\n                                                    vec4 Enter_The_Matrix1740379475608_175_gl_FragColor = vec4(0.0);\n                                                    vec2 st = Enter_The_Matrix1740379475608_175_vUv * resolution;\n                                                    Enter_The_Matrix1740379475608_175_gl_FragColor = backgroundColor + matrix(st);\n                                                    return Enter_The_Matrix1740379475608_175_gl_FragColor *= 1.0;\n                                                }\nvoid main() \n                                                {\n                                                    gl_FragColor = (Enter_The_Matrix1740379475608_175_main() + Black_White_Texture_Filter1740379424525_129_main());                                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 Black_White_Texture_Filter1740379424525_129_vUv;\nvarying vec2 vUv2;\nvarying vec2 Enter_The_Matrix1740379475608_175_vUv;\nvec4 Black_White_Texture_Filter1740379424525_129_main() \n                                                {\n                                                    vec4 Black_White_Texture_Filter1740379424525_129_gl_Position = vec4(0.0);\n                                                    vNormal = normal;\n                                                    Black_White_Texture_Filter1740379424525_129_vUv = uv;\n                                                    vUv2 = uv2;\n                                                    vPosition = position;\n                                                    Black_White_Texture_Filter1740379424525_129_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                    return Black_White_Texture_Filter1740379424525_129_gl_Position *= 0.1;\n                                                }\nvec4 Enter_The_Matrix1740379475608_175_main() \n                                                {\n                                                    vec4 Enter_The_Matrix1740379475608_175_gl_Position = vec4(0.0);\n                                                    Enter_The_Matrix1740379475608_175_vUv = uv;\n                                                    Enter_The_Matrix1740379475608_175_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                    return Enter_The_Matrix1740379475608_175_gl_Position *= 1.0;\n                                                }\nvoid main() \n                                                {\n                                                    gl_Position = Black_White_Texture_Filter1740379424525_129_main() + Enter_The_Matrix1740379475608_175_main();                                                }\n",
  "uniforms": {
    "textureSampler": {
      "value": null,
      "type": "t",
      "glslType": "sampler2D"
    },
    "sampleColor": {
      "value": {
        "r": 0.996078431372549,
        "g": 0.14901960784313725,
        "b": 0.058823529411764705
      },
      "type": "c",
      "glslType": "vec3"
    },
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "color": {
      "value": {
        "r": 0,
        "g": 0.7019607843137254,
        "b": 0.1450980392156863
      },
      "type": "c",
      "glslType": "vec3"
    },
    "resolution": {
      "value": {
        "x": 0.46153846153846156,
        "y": 0.36923076923076925
      },
      "type": "v2",
      "glslType": "vec2"
    },
    "backgroundColor": {
      "value": {
        "x": 0,
        "y": 0,
        "z": 0,
        "w": 1
      },
      "type": "v4",
      "glslType": "vec4"
    },
    "charResolution": {
      "value": "7.72425155",
      "type": "f",
      "glslType": "float"
    },
    "speed": {
      "value": "18.26450037",
      "type": "f",
      "glslType": "float"
    },
    "charSize": {
      "value": {
        "x": 0.8769230769230769,
        "y": 0.9384615384615385
      },
      "type": "v2",
      "glslType": "vec2"
    }
  },
  "url": "http://shaderfrog.com/app/view/7096",
  "user": {
    "username": "jiang",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}